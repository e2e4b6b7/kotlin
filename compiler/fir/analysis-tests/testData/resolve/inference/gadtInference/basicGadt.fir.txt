FILE: basicGadt.kt
    public final fun <T> transform(v: R|T|): R|T| {
        ^transform R|kotlin/TODO|()
    }
    public final fun <T> consume(v: R|T|): R|kotlin/Unit| {
        ^consume R|kotlin/TODO|()
    }
    public final fun <T> produce(): R|T| {
        ^produce R|kotlin/TODO|()
    }
    public final fun <T> basic1(t: R|T|): R|kotlin/Unit| {
        when () {
            (R|<local>/t| is R|kotlin/Int|) ->  {
                R|/consume|<R|T|>(R|/produce|<R|kotlin/Int|>())
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|kotlin/Int|>(R|/produce|<R|T|>())
            }
        }

    }
    public final fun <T> basic2(t: R|T|): R|kotlin/Unit| {
        when () {
            (R|<local>/t| is R|kotlin/collections/List<*>|) ->  {
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|T|>(R|/produce|<R|kotlin/collections/List<*>|>())
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|kotlin/collections/List<*>|>(R|/produce|<R|T|>())
            }
        }

    }
    public final inline fun <reified U> basic reified final class(u: R|U|): R|kotlin/Unit| {
        when () {
            (R|/produce|<R|kotlin/Int|>() is R|U|) ->  {
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|kotlin/Int|>(R|/produce|<R|U|>())
                R|/consume|<R|U|>(R|/produce|<R|kotlin/Int|>())
            }
        }

    }
    public open class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

    }
    public final inline fun <reified U> basic reified open class(u: R|U|): R|kotlin/Unit| {
        when () {
            (R|/produce|<R|A|>() is R|U|) ->  {
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|A|>(R|/produce|<R|U|>())
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|U|>(R|/produce|<R|A|>())
            }
        }

    }
    public final class Invariant<T> : R|kotlin/Any| {
        public constructor<T>(value: R|T|): R|Invariant<T>| {
            super<R|kotlin/Any|>()
        }

        public final val value: R|T| = R|<local>/value|
            public get(): R|T|

    }
    public final fun <V> unsound1(invariant: R|Invariant<V>|): R|kotlin/Unit| {
        when () {
            (R|<local>/invariant|.R|SubstitutionOverride</Invariant.value: R|V|>| is R|kotlin/Int|) ->  {
                R|/consume|<R|V|>(R|/produce|<R|kotlin/Int|>())
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|V|>(R|/produce|<R|kotlin/Any|>())
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|kotlin/Int|>(R|/produce|<R|V|>())
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|Invariant<kotlin/Int>|>(R|/produce|<R|Invariant<V>|>())
                R|/consume<Inapplicable(INAPPLICABLE): /consume>#|<R|Invariant<V>|>(R|/produce|<R|Invariant<kotlin/Int>|>())
            }
        }

    }
